CREATE OR REPLACE TYPE FULL_NAME AS
    OBJECT (
        FIRST_NAME VARCHAR2(255),
        LAST_NAME VARCHAR2(255)
    );
/

CREATE TABLE USERS (
    ID VARCHAR2(36) PRIMARY KEY,
    NAME FULL_NAME NOT NULL,
    DOB DATE NOT NULL,
    ADDRESS VARCHAR2(255) NOT NULL,
    MOBILE VARCHAR2(255) NOT NULL,
    CITY_CODE VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    PASSWORD VARCHAR2(255) NOT NULL,
    REGISTERED DATE DEFAULT SYSDATE,
    TYPE VARCHAR2(255) DEFAULT 'USER' NOT NULL, -- USER, ADMIN
    PROFILE_IMAGE VARCHAR2(255) DEFAULT 'https://placehold.co/600x400'
);

CREATE OR REPLACE PROCEDURE GET_ALL_USERS(
    P_CURSOR OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN P_CURSOR FOR
        SELECT
            *
        FROM
            USERS;
END;
/

CREATE TABLE QA_OFFICER (
    ID VARCHAR2(36) PRIMARY KEY,
    USER_ID VARCHAR2(36) NOT NULL,
    ACADEMIC_QUALIFICATION VARCHAR2(1024) NOT NULL,
    APPROVED NUMBER(1) DEFAULT 0 CHECK (APPROVED IN (0, 1)),
    CV_LINK VARCHAR2(1024) NOT NULL,
    DATE_OF_JOINING DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE CHEF (
    ID VARCHAR2(36) PRIMARY KEY,
    CHEF_NAME VARCHAR2(100) UNIQUE NOT NULL,
    USER_ID VARCHAR2(36) NOT NULL,
    SPECIALITY VARCHAR2(100) NOT NULL,
    EXPERIENCE NUMBER DEFAULT 0,
    STATUS VARCHAR2(255) DEFAULT 'ACTIVE' NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE KITCHEN (
    ID VARCHAR2(36) PRIMARY KEY,
    NAME VARCHAR2(100) UNIQUE NOT NULL,
    ADDRESS VARCHAR2(100) NOT NULL,
    CITY_NAME VARCHAR2(100) NOT NULL,
    CHEF_ID VARCHAR2(36) NOT NULL,
    APPROVED NUMBER(1) DEFAULT 0 CHECK (APPROVED IN (0, 1)),
    FOREIGN KEY (CHEF_ID) REFERENCES CHEF(ID)
);

CREATE TABLE KITCHEN_IMAGES(
    ID VARCHAR2(36) PRIMARY KEY,
    KITCHEN_ID VARCHAR2(36) NOT NULL,
    IMAGE VARCHAR2(255) DEFAULT 'https://placehold.co/600x400',
    DATE_ADDED DATE DEFAULT SYSDATE,
    FOREIGN KEY (KITCHEN_ID) REFERENCES KITCHEN(ID)
);

CREATE TABLE CERTIFICATION (
    ID VARCHAR2(36) PRIMARY KEY,
    CHEF_ID VARCHAR2(36) NOT NULL,
    CERTIFICATION VARCHAR2(300) UNIQUE NOT NULL,
    ISSUE_DATE DATE NOT NULL,
    EXPIRY_DATE DATE,
    LINK VARCHAR2(300) UNIQUE NOT NULL,
    FOREIGN KEY (CHEF_ID) REFERENCES CHEF(ID),
    CERTIFICATE_IMAGE VARCHAR2(300) DEFAULT 'https://placehold.co/600x400'
);

CREATE TABLE CATEGORY (
    ID VARCHAR2(36) PRIMARY KEY,
    KITCHEN_ID VARCHAR2(36) NOT NULL,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(300) NOT NULL,
    CATEGORY_IMAGE VARCHAR2(300) DEFAULT 'https://placehold.co/600x400',
    FOREIGN KEY (KITCHEN_ID) REFERENCES KITCHEN(ID)
);

CREATE TABLE FOOD (
    ID VARCHAR2(36) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    DESCRIPTION VARCHAR2(300) NOT NULL,
    PRICE NUMBER NOT NULL,
    RATING NUMBER DEFAULT 0,
    CATEGORY_ID VARCHAR2(36) NOT NULL,
    FOOD_IMAGE VARCHAR2(255) DEFAULT 'https://placehold.co/600x400',
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID)
);

CREATE TABLE INGREDIENT (
    ID VARCHAR2(36) PRIMARY KEY,
    FOOD_ID VARCHAR2(36) NOT NULL,
    NAME VARCHAR2(255) NOT NULL,
    QUANTITY NUMBER NOT NULL,
    CALORIES NUMBER NOT NULL,
    FOREIGN KEY (FOOD_ID) REFERENCES FOOD(ID)
);

CREATE TABLE ORDERS (
    ID VARCHAR2(255) PRIMARY KEY,
    USER_ID VARCHAR2(36) NOT NULL,
    TOTAL NUMBER DEFAULT 0,
    DATE_ADDED DATE DEFAULT SYSDATE,
    DATE_PREPARED DATE,
    DATE_SHIPPED DATE,
    DATE_DELIVERED DATE,
    SHIPPING_ADD VARCHAR2(3255) NOT NULL,
    SHIPPING_PHONE VARCHAR2(255) NOT NULL,
    SHIPPING_NAME VARCHAR2(255) NOT NULL,
    STATUS VARCHAR2(255) DEFAULT 'PAID' NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE CART (
    ID VARCHAR2(36) PRIMARY KEY,
    USER_ID VARCHAR2(36) NOT NULL,
    FOOD_ID VARCHAR2(36) NOT NULL,
    QUANTITY NUMBER NOT NULL,
    DATE_ADDED DATE DEFAULT SYSDATE,
    DELETED NUMBER(1) DEFAULT 0 CHECK (DELETED IN (0, 1)),
    DELETED_ID VARCHAR2(255),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (FOOD_ID) REFERENCES FOOD(ID),
    FOREIGN KEY (DELETED_ID) REFERENCES ORDERS(ID)
);

CREATE TABLE DELIVERY_PARTNER (
    ID VARCHAR2(36) PRIMARY KEY,
    USER_ID VARCHAR2(36) NOT NULL,
    LICENSE VARCHAR2(255) NOT NULL,
    VEHICLE VARCHAR2(255) NOT NULL,
    VERIFIED NUMBER(1) DEFAULT 0 CHECK (VERIFIED IN (0, 1)),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE CONVERSATIONS (
    CONVERSATION_ID VARCHAR2(36) PRIMARY KEY,
    USER_ID VARCHAR2(36) NOT NULL,
    DELIVERY_PARTNER_ID VARCHAR2(36) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (DELIVERY_PARTNER_ID) REFERENCES USERS(ID)
);

CREATE TABLE MESSAGES (
    MESSAGE_ID VARCHAR2(36) PRIMARY KEY,
    CONVERSATION_ID VARCHAR2(36) NOT NULL,
    SENDER_ID VARCHAR2(36) NOT NULL,
    MESSAGE VARCHAR2(255) NOT NULL,
    DATE_ADDED DATE DEFAULT SYSDATE,
    FOREIGN KEY (CONVERSATION_ID) REFERENCES CONVERSATIONS(CONVERSATION_ID),
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(ID)
);

CREATE TABLE ACTIVE_DELIVERY (
    ID VARCHAR2(36) PRIMARY KEY,
    ORDER_ID VARCHAR2(36) NOT NULL,
    DELIVERY_PARTNER_ID VARCHAR2(36) NOT NULL,
    STATUS VARCHAR2(255) DEFAULT 'PENDING' NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
    FOREIGN KEY (DELIVERY_PARTNER_ID) REFERENCES USERS(ID)
);

CREATE TABLE FOOD_RATING (
    ID VARCHAR2(36) PRIMARY KEY,
    FOOD_ID VARCHAR2(36) NOT NULL,
    USER_ID VARCHAR2(36) NOT NULL,
    RATING NUMBER DEFAULT 0,
    REVIEW VARCHAR2(255) DEFAULT '',
    DATE_ADDED DATE DEFAULT SYSDATE,
    FOREIGN KEY (FOOD_ID) REFERENCES FOOD(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE DELIVERY_COMMISION (
    DELIVERY_PARTNER_ID VARCHAR2(36) NOT NULL,
    AMOUNT NUMBER DEFAULT 0.15,
    FOREIGN KEY (DELIVERY_PARTNER_ID) REFERENCES DELIVERY_PARTNER(ID)
);

CREATE TABLE CHEF_COMMISION (
    CHEF_ID VARCHAR2(36) NOT NULL,
    AMOUNT NUMBER DEFAULT 0.8,
    FOREIGN KEY (CHEF_ID) REFERENCES CHEF(ID)
);

CREATE TABLE LOGS(
    ID VARCHAR2(36) PRIMARY KEY,
    LOG_TIMESTAMP DATE DEFAULT SYSDATE,
    TYPE VARCHAR2(255) NOT NULL,
    MESSAGE VARCHAR2(255) NOT NULL,
    STATUS VARCHAR2(255) DEFAULT 'INFO' NOT NULL
);

CREATE TABLE REPORT_FOOD(
    ID VARCHAR2(36) PRIMARY KEY,
    FOOD_ID VARCHAR2(36) NOT NULL,
    USER_ID VARCHAR2(36) NOT NULL,
    REASON VARCHAR2(255) NOT NULL,
    STATUS VARCHAR2(255) DEFAULT 'PENDING' NOT NULL,
    DATE_ADDED DATE DEFAULT SYSDATE,
    FOREIGN KEY (FOOD_ID) REFERENCES FOOD(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE OR REPLACE FUNCTION GET_RATING_FOOD(
    F_ID VARCHAR2
) RETURN VARCHAR2 IS
    RATING NUMBER;
BEGIN
    SELECT
        COALESCE(AVG(RATING), 0) INTO RATING
    FROM
        FOOD_RATING
    WHERE
        FOOD_ID = F_ID;
    RETURN RATING;
END;
/

CREATE OR REPLACE FUNCTION GET_RATING_CATEGORY(
    CAT_ID VARCHAR2
) RETURN NUMBER IS
    RATING NUMBER;
BEGIN
    SELECT
        COALESCE(AVG(RATING), 0) INTO RATING
    FROM
        FOOD_RATING
    WHERE
        FOOD_ID IN (
            SELECT
                ID
            FROM
                FOOD
            WHERE
                CATEGORY_ID = CAT_ID
        );
    RETURN RATING;
END;
/

CREATE OR REPLACE FUNCTION GET_RATING_KITCHEN(
    K_ID VARCHAR2
) RETURN NUMBER IS
    RATING NUMBER;
BEGIN
    SELECT
        COALESCE(AVG(RATING), 0) INTO RATING
    FROM
        FOOD_RATING
    WHERE
        FOOD_ID IN (
            SELECT
                ID
            FROM
                FOOD
            WHERE
                CATEGORY_ID IN (
                    SELECT
                        ID
                    FROM
                        CATEGORY
                    WHERE
                        KITCHEN_ID = K_ID
                )
        );
    RETURN RATING;
END;
/

CREATE OR REPLACE FUNCTION GET_RATING_CHEF(
    C_ID VARCHAR2
) RETURN NUMBER IS
    RATING NUMBER DEFAULT 0;
BEGIN
    SELECT
        COALESCE(AVG(RATING), 0) INTO RATING
    FROM
        FOOD_RATING
    WHERE
        FOOD_ID IN (
            SELECT
                ID
            FROM
                FOOD
            WHERE
                CATEGORY_ID IN (
                    SELECT
                        ID
                    FROM
                        CATEGORY
                    WHERE
                        KITCHEN_ID IN (
                            SELECT
                                ID
                            FROM
                                KITCHEN
                            WHERE
                                CHEF_ID = C_ID
                        )
                )
        );
    RETURN RATING;
END;
/

CREATE OR REPLACE PROCEDURE ADD_REPORT_FOOD(
    F_ID VARCHAR2,
    U_ID VARCHAR2,
    REASON VARCHAR2
) IS
BEGIN
    INSERT INTO REPORT_FOOD (
        FOOD_ID,
        USER_ID,
        REASON
    ) VALUES (
        F_ID,
        U_ID,
        REASON
    );
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'REPORT_FOOD',
        'Food Reported - '
        || F_ID,
        'WARNING'
    );
END;
/

CREATE OR REPLACE PROCEDURE REPORT_UNDER_REVIEW(
    R_ID VARCHAR2
) IS
BEGIN
    UPDATE REPORT_FOOD
    SET
        STATUS = 'UNDER_REVIEW'
    WHERE
        ID = R_ID;
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'REPORT_FOOD',
        'Food Report Under Review - '
        || R_ID,
        'INFO'
    );
END;
/

CREATE OR REPLACE PROCEDURE REPORT_RESOLVED(
    R_ID VARCHAR2
) IS
BEGIN
    UPDATE REPORT_FOOD
    SET
        STATUS = 'RESOLVED'
    WHERE
        ID = R_ID;
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'REPORT_FOOD',
        'Food Report Resolved - '
        || R_ID,
        'SUCCESS'
    );
END;
/

CREATE OR REPLACE PROCEDURE BAN_CHEF(
    C_ID VARCHAR2
) IS
BEGIN
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'CHEF_DELETE',
        'Chef Deleted - '
        || C_ID,
        'WARNING'
    );
    UPDATE CHEF
    SET
        STATUS = 'BANNED'
    WHERE
        ID = C_ID;
END;
/

CREATE OR REPLACE PROCEDURE UNBAN_CHEF(
    C_ID VARCHAR2
) IS
BEGIN
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'CHEF_UNBAN',
        'Chef Unbanned - '
        || C_ID,
        'SUCCESS'
    );
    UPDATE CHEF
    SET
        STATUS = 'ACTIVE'
    WHERE
        ID = C_ID;
END;
/

CREATE OR REPLACE PROCEDURE MAKE_ADMIN(
    U_EMAIL VARCHAR2
) IS
BEGIN
    UPDATE USERS
    SET
        TYPE = 'ADMIN'
    WHERE
        EMAIL = U_EMAIL;
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'MAKE_ADMIN',
        'User Made Admin - '
        || U_EMAIL,
        'WARNING'
    );
END;
/

CREATE OR REPLACE PROCEDURE REMOVE_ADMIN(
    U_EMAIL VARCHAR2
) IS
BEGIN
    UPDATE USERS
    SET
        TYPE = 'USER'
    WHERE
        EMAIL = U_EMAIL;
    INSERT INTO LOGS (
        TYPE,
        MESSAGE,
        STATUS
    ) VALUES (
        'REMOVE_ADMIN',
        'Admin Removed - '
        || U_EMAIL,
        'WARNING'
    );
END;
/

CREATE SEQUENCE REPORT_ID_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER REPORT_ID_TRIGGER BEFORE
    INSERT ON REPORT_FOOD FOR EACH ROW
BEGIN
    :NEW.ID := 'RF'
               || REPORT_ID_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE LOGS_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER LOGS_TRIGGER BEFORE
    INSERT ON LOGS FOR EACH ROW
BEGIN
    :NEW.ID := 'LOG'
               || LOGS_SEQUENCE.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER DELIVERY_COMMISION_TRIGGER AFTER
    INSERT ON DELIVERY_PARTNER FOR EACH ROW
BEGIN
    INSERT INTO DELIVERY_COMMISION (
        DELIVERY_PARTNER_ID
    ) VALUES (
        :NEW.ID
    );
END;
/

CREATE OR REPLACE TRIGGER CHEF_COMMISION_TRIGGER AFTER
    INSERT ON CHEF FOR EACH ROW
BEGIN
    INSERT INTO CHEF_COMMISION (
        CHEF_ID
    ) VALUES (
        :NEW.ID
    );
END;
/

CREATE SEQUENCE CONVERSATION_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER CONVERSATION_TRIGGER BEFORE
    INSERT ON CONVERSATIONS FOR EACH ROW
BEGIN
    :NEW.CONVERSATION_ID := 'CON'
                            || CONVERSATION_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE MESSAGE_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER MESSAGE_TRIGGER BEFORE
    INSERT ON MESSAGES FOR EACH ROW
BEGIN
    :NEW.MESSAGE_ID := 'MSG'
                       || MESSAGE_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE FOOD_RATING_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER FOOD_RATING_TRIGGER BEFORE
    INSERT ON FOOD_RATING FOR EACH ROW
BEGIN
    :NEW.ID := 'FR'
               || FOOD_RATING_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE9
             START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER9 BEFORE
    INSERT ON CATEGORY FOR EACH ROW
BEGIN
    :NEW.ID := 'CAT'
               || SEQUENCE9.NEXTVAL;
END;
/

CREATE SEQUENCE ACTIVE_DELIVERY_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER ACTIVE_DELIVERY_TRIGGER BEFORE
    INSERT ON ACTIVE_DELIVERY FOR EACH ROW
BEGIN
    :NEW.ID := 'AD'
               || ACTIVE_DELIVERY_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE DELIVERY_PARTNER_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER DELIVERY_PARTNER_TRIGGER BEFORE
    INSERT ON DELIVERY_PARTNER FOR EACH ROW
BEGIN
    :NEW.ID := 'DP'
               || DELIVERY_PARTNER_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE CART_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER CART_TRIGGER BEFORE
    INSERT ON CART FOR EACH ROW
BEGIN
    :NEW.ID := 'CART'
               || CART_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE INGREDIENT_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER INGREDIENT_TRIGGER BEFORE
    INSERT ON INGREDIENT FOR EACH ROW
BEGIN
    :NEW.ID := 'I'
               || INGREDIENT_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE FOOD_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER FOOD_TRIGGER BEFORE
    INSERT ON FOOD FOR EACH ROW
BEGIN
    :NEW.ID := 'F'
               || FOOD_SEQUENCE.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE1 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER1 BEFORE
    INSERT ON USERS FOR EACH ROW
BEGIN
    :NEW.ID := 'U'
               || SEQUENCE1.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE2 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER2 BEFORE
    INSERT ON CHEF FOR EACH ROW
BEGIN
    :NEW.ID := 'C'
               || SEQUENCE2.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE3 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER3 BEFORE
    INSERT ON CERTIFICATION FOR EACH ROW
BEGIN
    :NEW.ID := 'CER'
               || SEQUENCE3.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE4 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER4 BEFORE
    INSERT ON KITCHEN FOR EACH ROW
BEGIN
    :NEW.ID := 'K'
               || SEQUENCE4.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE7 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER7 BEFORE
    INSERT ON KITCHEN_IMAGES FOR EACH ROW
BEGIN
    :NEW.ID := 'KI'
               || SEQUENCE7.NEXTVAL;
END;
/

CREATE SEQUENCE SEQUENCE8 START WITH 1;

CREATE OR REPLACE TRIGGER TRIGGER8 BEFORE
    INSERT ON QA_OFFICER FOR EACH ROW
BEGIN
    :NEW.ID := 'Q'
               || SEQUENCE8.NEXTVAL;
END;
/

SELECT
    *
FROM
    CART;

-- create an admin users
INSERT INTO USERS (
    ID,
    FIRST_NAME,
    LAST_NAME,
    DOB,
    ADDRESS,
    MOBILE,
    CITY_CODE,
    EMAIL,
    PASSWORD,
    TYPE
) VALUES (
    'ADMIN1',
    'Admin',
    'User',
    TO_DATE('01-01-1990', 'DD-MM-YYYY'),
    'Admin Address',
    '1234567890',
    'CITY1',
    'admin@admin.com',
    'admin',
    'ADMIN'
);

--GET_KITCHEN_IMAGE(KITCHEN.ID) AS KITCHEN_IMAGE,

-- -- DROP SEQUENCES
-- DROP SEQUENCE SEQUENCE1;

-- DROP SEQUENCE SEQUENCE2;

-- DROP SEQUENCE SEQUENCE3;

-- DROP SEQUENCE SEQUENCE4;

-- DROP SEQUENCE SEQUENCE7;

-- DROP SEQUENCE SEQUENCE8;

-- DROP SEQUENCE SEQUENCE9;

-- DROP SEQUENCE ACTIVE_DELIVERY_SEQ;

-- DROP SEQUENCE CART_SEQUENCE;

-- DROP SEQUENCE INGREDIENT_SEQUENCE;

-- DROP SEQUENCE FOOD_SEQUENCE;

-- DROP SEQUENCE DELIVERY_PARTNER_SEQUENCE;

-- DROP SEQUENCE FOOD_RATING_SEQUENCE;

-- DROP SEQUENCE MESSAGE_SEQUENCE;

-- DROP SEQUENCE CONVERSATION_SEQUENCE;

-- DROP SEQUENCE LOGS_SEQUENCE;

-- DROP SEQUENCE REPORT_ID_SEQUENCE;

-- -- DROP TRIGGERS
-- DROP TRIGGER DELIVERY_COMMISION_TRIGGER;

-- DROP TRIGGER CHEF_COMMISION_TRIGGER;

-- -- Drop tables
-- DROP TABLE ACTIVE_DELIVERY CASCADE CONSTRAINTS;

-- DROP TABLE CART CASCADE CONSTRAINTS;

-- DROP TABLE CERTIFICATION CASCADE CONSTRAINTS;

-- DROP TABLE CATEGORY CASCADE CONSTRAINTS;

-- DROP TABLE CHEF CASCADE CONSTRAINTS;

-- DROP TABLE DELIVERY_PARTNER CASCADE CONSTRAINTS;

-- DROP TABLE FOOD CASCADE CONSTRAINTS;

-- DROP TABLE INGREDIENT CASCADE CONSTRAINTS;

-- DROP TABLE KITCHEN CASCADE CONSTRAINTS;

-- DROP TABLE KITCHEN_IMAGES CASCADE CONSTRAINTS;

-- DROP TABLE ORDERS CASCADE CONSTRAINTS;

-- DROP TABLE QA_OFFICER CASCADE CONSTRAINTS;

-- DROP TABLE USERS CASCADE CONSTRAINTS;

-- DROP TABLE CONVERSATIONS CASCADE CONSTRAINTS;

-- DROP TABLE MESSAGES CASCADE CONSTRAINTS;

-- DROP TABLE FOOD_RATING CASCADE CONSTRAINTS;

-- DROP TABLE DELIVERY_COMMISION CASCADE CONSTRAINTS;

-- DROP TABLE CHEF_COMMISION CASCADE CONSTRAINTS;

-- DROP TABLE LOGS CASCADE CONSTRAINTS;

-- DROP TABLE REPORT_FOOD CASCADE CONSTRAINTS;